def bond_analytics_factory(bond: BondBase) -> BondAnalyticsBase:
    if bond.bond_type == BondTypeEnum.ZERO_COUPON:
        return ZeroCouponBondAnalytics(bond)
    elif bond.bond_type == BondTypeEnum.FIXED_COUPON:
        return FixedRateBondAnalytics(bond)
    elif bond.bond_type == BondTypeEnum.CALLABLE:
        return CallableBondAnalytics(bond)
    elif bond.bond_type == BondTypeEnum.PUTABLE:
        return PutableBondAnalytics(bond)
    elif bond.bond_type == BondTypeEnum.FLOATING:
        return FloatingRateBondAnalytics(bond)
    else:
        raise ValueError(f"Unsupported bond type: {bond.bond_type}")



class BondAnalyticsBase(ABC):
    def __init__(self, bond: BondBase):
        self.bond_type = bond.bond_type
        self.day_count_convention = _to_ql_day_count(bond.day_count_convention)

        self.face_value = bond.face_value
        self.market_price = bond.market_price

        self.issue_date = _to_ql_date(bond.issue_date)
        self.maturity_date = _to_ql_date(bond.maturity_date)
        self.settlement_date = _to_ql_date(bond.settlement_date) if bond.settlement_date else self.maturity_date
        self.settlement_days = bond.settlement_days

        self.credit_rating = bond.credit_rating

        self.calendar = TARGET()
        self.convention = Following

    @abstractmethod
    def build_quantlib_bond(self):
        pass

    @abstractmethod
    def cashflows(self) -> list:
        pass

    @abstractmethod
    def clean_price(self) -> float:
        pass

    @abstractmethod
    def dirty_price(self) -> float:
        pass

    @abstractmethod
    def accrued_interest(self) -> float:
        pass

    @abstractmethod
    def yield_to_maturity(self) -> float:
        pass

    @abstractmethod
    def yield_to_worst(self) -> float:
        pass

    @abstractmethod
    def modified_duration(self) -> float:
        pass

    @abstractmethod
    def macaulay_duration(self) -> float:
        pass

    @abstractmethod
    def simple_duration(self) -> float:
        pass

    @abstractmethod
    def convexity(self) -> float:
        pass

    @abstractmethod
    def dv01(self) -> float:
        pass

    @abstractmethod
    def summary(self) -> dict:
        pass

    @abstractmethod
    def get_discount_curve(self):
        pass


CREATE TABLE bond_analytics (
    id SERIAL PRIMARY KEY,
    bond_id INTEGER REFERENCES bonds(id),
    analytics_date DATE NOT NULL,
    bond_type Enum,

    clean_price FLOAT,
    dirty_price FLOAT,
    accrued_interest FLOAT,

    ytm FLOAT,
    ytw FLOAT,

    duration_mod FLOAT,
    duration_mac FLOAT,
    duration_simple FLOAT,

    convexity FLOAT,
    dv01 FLOAT,

    summary JSON,

    UNIQUE (bond_id, analytics_date)
);
